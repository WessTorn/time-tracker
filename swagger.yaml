basePath: /
definitions:
  database.Task:
    properties:
      duration:
        type: string
      end_time:
        type: string
      start_time:
        type: string
      task_id:
        type: integer
    type: object
  database.User:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      passport_number:
        type: string
      passport_serie:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
  routers.Passport:
    properties:
      passportNumber:
        type: string
    type: object
  routers.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
  routers.TaskID:
    properties:
      task_id:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an example of a time tracking API..
  title: Time tracker
  version: 1.0.0
paths:
  /tasks/{id}:
    get:
      description: Retrieves a list of tasks for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/database.Task'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/routers.Response'
        "404":
          description: Tasks not found
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to get tasks
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Get Tasks
      tags:
      - tasks
  /tasks/start/{id}:
    post:
      description: Starts a task for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: body
        name: task_id
        required: true
        schema:
          $ref: '#/definitions/routers.TaskID'
      produces:
      - application/json
      responses:
        "200":
          description: Task started successfully
          schema:
            $ref: '#/definitions/routers.Response'
        "400":
          description: Invalid user ID, Invalid request payload
          schema:
            $ref: '#/definitions/routers.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routers.Response'
        "409":
          description: Task already started
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to start task
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Start Task
      tags:
      - tasks
  /tasks/stop/{id}:
    post:
      description: Stops a task for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: body
        name: task_id
        required: true
        schema:
          $ref: '#/definitions/routers.TaskID'
      produces:
      - application/json
      responses:
        "200":
          description: Task stopped successfully
          schema:
            $ref: '#/definitions/routers.Response'
        "400":
          description: Invalid user ID, Invalid request payload
          schema:
            $ref: '#/definitions/routers.Response'
        "409":
          description: Task not started
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to stop task
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Stop Task
      tags:
      - tasks
  /users:
    get:
      description: Retrieves a list of users with optional filters
      parameters:
      - description: Passport Series
        in: query
        name: passport_serie
        type: string
      - description: Passport Number
        in: query
        name: passport_number
        type: string
      - description: Last Name
        in: query
        name: surname
        type: string
      - description: First Name
        in: query
        name: name
        type: string
      - description: Patronymic
        in: query
        name: patronymic
        type: string
      - description: Address
        in: query
        name: address
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Invalid limit, Invalid page
          schema:
            $ref: '#/definitions/routers.Response'
        "404":
          description: Users not found
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to get users
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Get Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user to the database using passport series and number
      parameters:
      - description: Passport number
        in: body
        name: passportNumber
        required: true
        schema:
          $ref: '#/definitions/routers.Passport'
      produces:
      - application/json
      responses:
        "200":
          description: User added successfully
          schema:
            $ref: '#/definitions/routers.Response'
        "400":
          description: Invalid request payload, Invalid passport number
          schema:
            $ref: '#/definitions/routers.Response'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to fetch user data from external API, Failed to add
            user to the database
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Add a new user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/routers.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Delete user
      tags:
      - users
    put:
      description: Updates a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/routers.Response'
        "400":
          description: No fields to update, Error print
          schema:
            $ref: '#/definitions/routers.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routers.Response'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/routers.Response'
      summary: Update User
      tags:
      - users
swagger: "2.0"
